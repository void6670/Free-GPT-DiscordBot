var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Jinter_ast;
import Visitor from './visitor.js';
import { parse } from 'acorn';
export default class Jinter {
    constructor(input) {
        _Jinter_ast.set(this, void 0);
        const program = parse(input, { ecmaVersion: 2020 });
        __classPrivateFieldSet(this, _Jinter_ast, program.body, "f");
        this.visitor = new Visitor(__classPrivateFieldGet(this, _Jinter_ast, "f"));
        this.scope = this.visitor.scope;
        this.scope.set('print', (args) => console.log(...args));
        this.visitor.on('console', (node, visitor) => {
            if (node.type === 'Identifier')
                return console;
            if (node.type === 'CallExpression' && node.callee.type === 'MemberExpression') {
                const prop = visitor.visitNode(node.callee.property);
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const console_prop = console[prop];
                if (!console_prop)
                    return 'proceed';
                return console_prop(...args);
            }
            return 'proceed';
        });
        this.visitor.on('Math', (node, visitor) => {
            if (node.type === 'Identifier')
                return Math;
            if (node.type === 'CallExpression' && node.callee.type === 'MemberExpression') {
                const prop = visitor.visitNode(node.callee.property);
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const math_prop = Math[prop];
                if (!math_prop)
                    return 'proceed';
                return math_prop(...args);
            }
            return 'proceed';
        });
        this.visitor.on('String', (node, visitor) => {
            if (node.type === 'Identifier')
                return String;
            if (node.type === 'CallExpression' && node.callee.type === 'MemberExpression') {
                const prop = visitor.visitNode(node.callee.property);
                const args = node.arguments.map((arg) => visitor.visitNode(arg));
                const string_prop = String[prop];
                if (!string_prop)
                    return 'proceed';
                return string_prop(args);
            }
            return 'proceed';
        });
        this.visitor.on('Date', (node) => {
            if (node.type === 'Identifier')
                return Date;
        });
    }
    /**
     * Interprets the program.
     * @returns The result of the last statement in the program.
     */
    interpret() {
        return this.visitor.run();
    }
}
_Jinter_ast = new WeakMap();
